---
- name: Install SQL + Cmake_activating
  hosts: vagrant_sql
  become: true
  vars_files:
    - config.yaml
  tasks:
    - name: Get time
      command: date +"%Y-%m-%d %H:%M:%S"
      register: current_time_result

    - name: Create directory if not exist
      ansible.builtin.file:
        path: "/DevOps/src"
        state: directory
        recurse: yes
        mode: "0755"
      ignore_errors: yes

    - name: Debug message
      debug:
        msg: "{{ current_time_result.stdout }} Созданна директория '/DevOps/src'"

    - name: Downl SQLite.zip
      ansible.builtin.get_url:
        url: "{{ url }}"
        dest: "/DevOps/src/sqlite-amalgamation-3260000.zip"
        validate_certs: False

    - name: Debug message
      debug:
        msg: "{{ current_time_result.stdout }} Загрузка {{ url }}"

    - name: Unzip
      ansible.builtin.unarchive:
        src: "/DevOps/src/sqlite-amalgamation-3260000.zip"
        dest: "/DevOps/src/"
      register: unzip_result

    - name: Remove zip file
      ansible.builtin.file:
        path: "/DevOps/src/sqlite-amalgamation-3260000.zip"
        state: absent
      when: unzip_result.changed  

    - name: Debug message
      debug:
        msg: "{{ current_time_result.stdout }} Распаковка и удаление zip"

    #Проблемы с локальной директорией DevOps не видит файлы для src: (копирование не удаётся), но переменные с config.yaml считывает
    - name: create CMakeLists.txt
      copy:
        content: |
          cmake_minimum_required(VERSION 3.10)
          project(SQLite3)

          include_directories(src)
          #создание каталога logs
          file(MAKE_DIRECTORY ${CMAKE_SOURCE_DIR}/logs)

          include_directories(${CMAKE_SOURCE_DIR}/src)

          set(SQLite_SOURCES
              src/sqlite3.c
          )

          add_library(sqlite3 SHARED ${SQLite_SOURCES})


          if(UNIX)
              execute_process(
                  COMMAND date "+%Y-%m-%d %H:%M:%S"
                  OUTPUT_VARIABLE current_time
                  OUTPUT_STRIP_TRAILING_WHITESPACE
              )
          elseif(WIN32)
              execute_process(
                  COMMAND powershell get-date
                  OUTPUT_VARIABLE current_time
                  OUTPUT_STRIP_TRAILING_WHITESPACE
              )
          endif()


          file(APPEND ${CMAKE_SOURCE_DIR}/logs/CMake_build.log "${current_time}: Настройка проекта SQLite3...")

          target_compile_options(sqlite3 PRIVATE -DSQLITE_THREADSAFE=0)

          if(WIN32)
              target_compile_definitions(sqlite3 PRIVATE -DSQLITE_OS_WIN=1)
              file(APPEND ${CMAKE_SOURCE_DIR}/logs/CMake_build.log "${current_time}: Скомпилирован .dll / Windows")
          endif()

          if(UNIX)
              set(CMAKE_C_COMPILER gcc)
              set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
              target_compile_definitions(sqlite3 PRIVATE -DSQLITE_OS_UNIX=1)
              file(APPEND ${CMAKE_SOURCE_DIR}/logs/CMake_build.log "${current_time}: Скомпилирован .so / Linux")
          endif()

          file(APPEND ${CMAKE_SOURCE_DIR}/logs/CMake_build.log "${current_time}: Проект SQLite3 успешно сконфигурирован")

        dest: "/DevOps/CMakeLists.txt"

    - name: Debug message
      debug:
        msg: "{{ current_time_result.stdout }} CMakeLists добавлен"

    - name: create Dockerfile
      copy:
        content: |
          FROM buildpack-deps:bullseye

          WORKDIR /app

          COPY CMakeLists.txt /app/
          COPY src/sqlite-amalgamation-3260000/ /app/src

          RUN apt-get update && \
              apt-get install -y cmake

          RUN mkdir build 
          WORKDIR /app/build

          RUN cmake ..
          RUN make  

          RUN adduser --disabled-password user-dev
          USER user-dev
        dest: "/DevOps/Dockerfile"

    - name: Debug message
      debug:
        msg: "{{ current_time_result.stdout }} Dockerfile добавлен"
    
    - name: Build Docker Image
      command: "docker build ."
      args:
        chdir: /DevOps

    - name: Debug message
      ansible.builtin.debug:
        msg: "{{ current_time_result.stdout }} Image создан"

    - name: Check if Docker image exists
      ansible.builtin.docker_image_info:
        name: app_sqlite3_light:dev
      register: docker_image_info

    - name: Display Docker image information
      ansible.builtin.debug:
        var: docker_image_info
